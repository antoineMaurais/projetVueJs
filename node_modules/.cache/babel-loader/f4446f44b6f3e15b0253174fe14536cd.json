{"ast":null,"code":"export default {\n  name: \"spellStats\",\n  props: [\"tableauSpells\"],\n  computed: {\n    statistiqueSort() {\n      console.log(this.tableauSpells);\n\n      if (this.tableauSpells.length != 0) {\n        let value = this.tableauSpells.filter(spell => spell[1].startsWith(this.searchName));\n        return value.length;\n      } else return 0;\n    },\n\n    statistiqueNbLivreDiff() {\n      if (this.tableauSpells.length != 0) {\n        let value = this.tableauSpells.filter(spell => spell[1].startsWith(this.searchName));\n        let count = 0;\n        let countArrayLivre = [];\n\n        for (const vFor of value) {\n          if (!countArrayLivre.includes(vFor[0])) {\n            count++;\n            countArrayLivre.push(vFor[0]);\n          }\n        }\n\n        return count;\n      } else return 0;\n    },\n\n    statistiqueNbEcoleDiff() {\n      if (this.tableauSpells.length != 0) {\n        let value = this.tableauSpells.filter(spell => spell[1].startsWith(this.searchName));\n        let count = 0;\n        let countArraySchool = [];\n\n        for (const vFor of value) {\n          if (!countArraySchool.includes(vFor[2])) {\n            count++;\n            countArraySchool.push(vFor[2]);\n          }\n        }\n\n        return count;\n      } else return 0;\n    },\n\n    statistiqueNbBranchesDiff() {\n      if (this.tableauSpells) {\n        let value = this.tableauSpells.filter(spell => spell[1].startsWith(this.searchName));\n        let count = 0;\n        let countArrayBranche = [];\n\n        for (const vFor of value) {\n          if (vFor[3].length != 0) {\n            for (const branche of vFor[3]) {\n              if (!countArrayBranche.includes(branche)) {\n                count++;\n                countArrayBranche.push(branche);\n              }\n            }\n          }\n        }\n\n        return count;\n      } else return 0;\n    },\n\n    statistiqueNbClassesDiff() {\n      if (this.tableauSpells) {\n        let value = this.tableauSpells.filter(spell => spell[1].startsWith(this.searchName));\n        let count = 0;\n        let countArrayClasse = [];\n\n        for (const vFor of value) {\n          if (vFor[3].length != 0) {\n            for (const classe of vFor[4]) {\n              if (!countArrayClasse.includes(classe[0])) {\n                count++;\n                countArrayClasse.push(classe[0]);\n              }\n            }\n          }\n        }\n\n        return count;\n      } else return 0;\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["name","props","computed","statistiqueSort","console","log","tableauSpells","length","value","filter","spell","startsWith","searchName","statistiqueNbLivreDiff","count","countArrayLivre","vFor","includes","push","statistiqueNbEcoleDiff","countArraySchool","statistiqueNbBranchesDiff","countArrayBranche","branche","statistiqueNbClassesDiff","countArrayClasse","classe"],"sourceRoot":"","sources":["/home/maurais/Documents/projet-vue/src/components/formSpellStats.vue"],"sourcesContent":["<template>\n  <table class=\"stats\">\n    <tr>\n      <th>Nombre de livres</th>\n      <th>Nombre de sorts</th>\n      <th>Nombre d'Ã©coles</th>\n      <th>Nombre de branches</th>\n      <th>Nombre de classes</th>\n    </tr>\n    <tr>\n      <td>{{ statistiqueNbLivreDiff }}</td>\n      <td>{{ statistiqueSort }}</td>\n      <td>{{ statistiqueNbEcoleDiff }}</td>\n      <td>{{ statistiqueNbBranchesDiff }}</td>\n      <td>{{ statistiqueNbClassesDiff }}</td>\n    </tr>\n  </table>\n</template>\n\n\n<script>\nexport default {\n  name: \"spellStats\",\n  props: [\"tableauSpells\"],\n  computed: {\n    statistiqueSort() {\n      console.log(this.tableauSpells);\n      if (this.tableauSpells.length != 0) {\n        let value = this.tableauSpells.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        return value.length;\n      } else return 0;\n    },\n    statistiqueNbLivreDiff() {\n      if (this.tableauSpells.length != 0) {\n        let value = this.tableauSpells.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        let count = 0;\n        let countArrayLivre = [];\n        for (const vFor of value) {\n          if (!countArrayLivre.includes(vFor[0])) {\n            count++;\n            countArrayLivre.push(vFor[0]);\n          }\n        }\n        return count;\n      } else return 0;\n    },\n    statistiqueNbEcoleDiff() {\n      if (this.tableauSpells.length != 0) {\n        let value = this.tableauSpells.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        let count = 0;\n        let countArraySchool = [];\n        for (const vFor of value) {\n          if (!countArraySchool.includes(vFor[2])) {\n            count++;\n            countArraySchool.push(vFor[2]);\n          }\n        }\n        return count;\n      } else return 0;\n    },\n    statistiqueNbBranchesDiff() {\n      if (this.tableauSpells) {\n        let value = this.tableauSpells.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        let count = 0;\n        let countArrayBranche = [];\n        for (const vFor of value) {\n          if (vFor[3].length != 0) {\n            for (const branche of vFor[3]) {\n              if (!countArrayBranche.includes(branche)) {\n                count++;\n                countArrayBranche.push(branche);\n              }\n            }\n          }\n        }\n        return count;\n      } else return 0;\n    },\n    statistiqueNbClassesDiff() {\n      if (this.tableauSpells) {\n        let value = this.tableauSpells.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        let count = 0;\n        let countArrayClasse = [];\n        for (const vFor of value) {\n          if (vFor[3].length != 0) {\n            for (const classe of vFor[4]) {\n              if (!countArrayClasse.includes(classe[0])) {\n                count++;\n                countArrayClasse.push(classe[0]);\n              }\n            }\n          }\n        }\n        return count;\n      } else return 0;\n    },\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\ntable {\n  margin-top: 20px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.stats {\n  width: 100%;\n  border-collapse: collapse;\n  border: 2px solid black;\n}\nth {\n  padding: 5px;\n}\n</style>"]},"metadata":{},"sourceType":"module"}