{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Wiki des sorts\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"th\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache) {\n  const _component_HelloWorld = _resolveComponent(\"HelloWorld\");\n\n  const _component_menuHeader = _resolveComponent(\"menuHeader\");\n\n  const _component_checkBoxSelect = _resolveComponent(\"checkBoxSelect\");\n\n  const _component_spellView = _resolveComponent(\"spellView\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_HelloWorld, {\n    msg: \"Sorts :\"\n  }), _hoisted_1, _createVNode(_component_menuHeader), _createElementVNode(\"table\", null, [_hoisted_2, _createElementVNode(\"tr\", null, [_createVNode(_component_checkBoxSelect, {\n    onSpellSearch: _ctx.updateSearch\n  }, null, 8\n  /* PROPS */\n  , [\"onSpellSearch\"])])]), _hoisted_3, _createCommentVNode(\"  Utiliser v-if pour afficher different pnglet \"), _createCommentVNode(\" <div>\\n    <spellStats :tableauSpells=\\\"data\\\" />\\n  </div>\\n  <table class=\\\"stats\\\">\\n    <tr>\\n      <th>Nombre de livres</th>\\n      <th>Nombre de sorts</th>\\n      <th>Nombre d'écoles</th>\\n      <th>Nombre de branches</th>\\n      <th>Nombre de classes</th>\\n    </tr>\\n    <tr>\\n      <td>{{ statistiqueNbLivreDiff }}</td>\\n      <td>{{ statistiqueSort }}</td>\\n      <td>{{ statistiqueNbEcoleDiff }}</td>\\n      <td>{{ statistiqueNbBranchesDiff }}</td>\\n      <td>{{ statistiqueNbClassesDiff }}</td>\\n    </tr>\\n  </table>\\n\\n  <table>\\n    <tr>\\n      <th>Livre</th>\\n      <th>Nom</th>\\n      <th>Ecole</th>\\n      <th>Branche</th>\\n      <th>Classe</th>\\n    </tr>\\n    On boucle des lignes de tableau\\n          Chaque entité de spellSearch va être stocké dans spellFor\\n          Puis on met une clé pour dire sur quoi on boucle, ici le nom, mais c'est inutile dans notre cas\\n    \"), _createCommentVNode(\"\\n    <tr v-for=\\\"spellFor in spellSearch\\\" :key=\\\"spellFor[1]\\\">\\n      On appel l'élément spell de spellView et on lui donne la valeur de spellFor pour qu'il travaille avec \"), _createVNode(_component_spellView, {\n    spell: _ctx.spellFor,\n    onClick: _ctx.afficherButton\n  }, null, 8\n  /* PROPS */\n  , [\"spell\", \"onClick\"]), _createCommentVNode(\"\\n    </tr>\\n  </table> \")], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;gCAGEA,oBAAuB,IAAvB,EAAuB,IAAvB,EAAI,gBAAJ,EAAkB;AAAA;AAAlB;;gCAGEA,oBAAS,IAAT,EAAS,IAAT,EAAS,IAAT,EAAS;AAAA;AAAT;;gCAKFA,oBAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM;AAAA;AAAN;;;;;;;;;;;6DAVAC,aAA4BC,qBAA5B,EAA4B;AAAhBC,OAAG,EAAC;AAAY,GAA5B,GAEAC,YACAH,aAAcI,qBAAd,GACAL,oBAKQ,OALR,EAKQ,IALR,EAKQ,CAJNM,UAIM,EAHNN,oBAEK,IAFL,EAEK,IAFL,EAEK,CADHC,aAA8CM,yBAA9C,EAA8C;AAA7BC,iBAAW,EAAEC;AAAgB,GAA9C,EAA0C,IAA1C,EAA0C;AAAA;AAA1C,IAA0C,iBAA1C,CACG,CAFL,CAGM,CALR,GAMAC,YACAC,wEACAA,u5BAgCAA,wMAGAV,aAA2DW,oBAA3D,EAA2D;AAA/CC,SAAK,EAAEJ,aAAwC;AAAzBK,WAAK,EAAEL;AAAkB,GAA3D;;AAAA,2BACAE","names":["_createElementVNode","_createVNode","_component_HelloWorld","msg","_hoisted_1","_component_menuHeader","_hoisted_2","_component_checkBoxSelect","onSpellSearch","_ctx","_hoisted_3","_createCommentVNode","_component_spellView","spell","onClick"],"sourceRoot":"","sources":["/home/maurais/Documents/projet-vue/src/App.vue"],"sourcesContent":["<template>\n  <HelloWorld msg=\"Sorts :\" />\n\n  <h1>Wiki des sorts</h1>\n  <menuHeader />\n  <table>\n    <th></th>\n    <tr>\n      <checkBoxSelect @spellSearch=\"updateSearch\" />\n    </tr>\n  </table>\n  <br />\n  <!--  Utiliser v-if pour afficher different pnglet -->\n  <!-- <div>\n    <spellStats :tableauSpells=\"data\" />\n  </div>\n  <table class=\"stats\">\n    <tr>\n      <th>Nombre de livres</th>\n      <th>Nombre de sorts</th>\n      <th>Nombre d'écoles</th>\n      <th>Nombre de branches</th>\n      <th>Nombre de classes</th>\n    </tr>\n    <tr>\n      <td>{{ statistiqueNbLivreDiff }}</td>\n      <td>{{ statistiqueSort }}</td>\n      <td>{{ statistiqueNbEcoleDiff }}</td>\n      <td>{{ statistiqueNbBranchesDiff }}</td>\n      <td>{{ statistiqueNbClassesDiff }}</td>\n    </tr>\n  </table>\n\n  <table>\n    <tr>\n      <th>Livre</th>\n      <th>Nom</th>\n      <th>Ecole</th>\n      <th>Branche</th>\n      <th>Classe</th>\n    </tr>\n    On boucle des lignes de tableau\n          Chaque entité de spellSearch va être stocké dans spellFor\n          Puis on met une clé pour dire sur quoi on boucle, ici le nom, mais c'est inutile dans notre cas\n    -->\n  <!--\n    <tr v-for=\"spellFor in spellSearch\" :key=\"spellFor[1]\">\n      On appel l'élément spell de spellView et on lui donne la valeur de spellFor pour qu'il travaille avec -->\n  <spellView :spell=\"spellFor\" v-on:click=\"afficherButton\" />\n  <!--\n    </tr>\n  </table> -->\n</template>\n\n<script>\nimport spellView from \"./components/formSpellView.vue\";\nimport checkBoxSelect from \"./components/formCheckBoxSelect.vue\";\nimport spellStats from \"./components/formSpellStats.vue\";\nimport menuHeader from \"./components/formHeader.vue\";\nimport data from \"./assets/data.min.js\"; // Lien vers toutes les données\n\nexport default {\n  name: \"App\",\n  components: {\n    spellView\n    spellStats,\n    menuHeader,\n  },\n  data: function () {\n    return { searchName: \"\", searchNameBox: \"\" };\n  },\n  computed: {\n    spellSearch() {\n      /*On récupère les data de la base JS qu'on importe,\n        On filtre toutes les valeurs\n        On encapsule chaque valeur de nom, ici 'spell[1]' dans une variable 'spell'\n        Qui commence par les valeurs rentrés dans la zone de texte de l'input */\n      console.log(this.searchNameBox);\n      console.log(data);\n\n      if (this.searchNameBox)\n        return data.filter((spell) => spell[1].startsWith(this.searchName));\n      else return [];\n    },\n    statistiqueSort() {\n      if (this.searchNameBox) {\n        let value = data.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        return value.length;\n      } else return 0;\n    },\n    statistiqueNbLivreDiff() {\n      if (this.searchNameBox) {\n        let value = data.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        let count = 0;\n        let countArrayLivre = [];\n        for (const vFor of value) {\n          if (!countArrayLivre.includes(vFor[0])) {\n            count++;\n            countArrayLivre.push(vFor[0]);\n          }\n        }\n        return count;\n      } else return 0;\n    },\n    statistiqueNbEcoleDiff() {\n      if (this.searchNameBox) {\n        let value = data.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        let count = 0;\n        let countArraySchool = [];\n        for (const vFor of value) {\n          if (!countArraySchool.includes(vFor[2])) {\n            count++;\n            countArraySchool.push(vFor[2]);\n          }\n        }\n        return count;\n      } else return 0;\n    },\n    statistiqueNbBranchesDiff() {\n      if (this.searchNameBox) {\n        let value = data.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        let count = 0;\n        let countArrayBranche = [];\n        for (const vFor of value) {\n          if (vFor[3].length != 0) {\n            for (const branche of vFor[3]) {\n              if (!countArrayBranche.includes(branche)) {\n                count++;\n                countArrayBranche.push(branche);\n              }\n            }\n          }\n        }\n        return count;\n      } else return 0;\n    },\n    statistiqueNbClassesDiff() {\n      if (this.searchNameBox) {\n        let value = data.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        let count = 0;\n        let countArrayClasse = [];\n        for (const vFor of value) {\n          if (vFor[3].length != 0) {\n            for (const classe of vFor[4]) {\n              if (!countArrayClasse.includes(classe[0])) {\n                count++;\n                countArrayClasse.push(classe[0]);\n              }\n            }\n          }\n        }\n        return count;\n      } else return 0;\n    },\n  },\n  methods: {\n    updateSearch(searchName, searchNameBox) {\n      this.searchName = searchName;\n      this.searchNameBox = searchNameBox;\n    },\n    ongletRecherche() {\n      alert(\"Recherche\");\n    },\n    ongletStats() {\n      console.log(\"Stats\");\n    },\n    ongletConfiguration() {\n      alert(\"Configuration\");\n    },\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\ntable {\n  margin-top: 20px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.stats {\n  width: 100%;\n  border-collapse: collapse;\n  border: 2px solid black;\n}\nth {\n  padding: 5px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}