{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Search searchName :\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h4\", null, \"Il manque les stats(nombre de livres, de sorts...)\", -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Nombre de sorts\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Nombre d'armes\")], -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"td\", null, \"80\", -1\n/* HOISTED */\n);\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Arme\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Nom\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Sort\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Classe\")], -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HelloWorld = _resolveComponent(\"HelloWorld\");\n\n  const _component_spellView = _resolveComponent(\"spellView\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_HelloWorld, {\n    msg: \"Sorts :\"\n  }), _hoisted_1, _hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"search_name_val\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.searchName = $event),\n    placeholder: \"Rechercher\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, _ctx.searchName]]), _createElementVNode(\"table\", null, [_hoisted_3, _createElementVNode(\"tr\", null, [_createElementVNode(\"td\", null, _toDisplayString($options.statistiqueSort), 1\n  /* TEXT */\n  ), _hoisted_4])]), _createElementVNode(\"table\", null, [_hoisted_5, _createCommentVNode(\"  On boucle des lignes de tableau\\n          Chaque entité de spellSearch va être stocké dans spellFor\\n          Puis on met une clé pour dire sur quoi on boucle, ici le nom, mais c'est inutile dans notre cas\\n    \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.spellSearch, spellFor => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: spellFor[1]\n    }, [_createCommentVNode(\"On appel l'élément spell de spellView et on lui donne la valeur de spellFor pour qu'il travaille avec \"), _createVNode(_component_spellView, {\n      spell: spellFor\n    }, null, 8\n    /* PROPS */\n    , [\"spell\"])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;gCAGEA,oBAA4B,IAA5B,EAA4B,IAA5B,EAAI,qBAAJ,EAAuB;AAAA;AAAvB;;gCACAA,oBAA2D,IAA3D,EAA2D,IAA3D,EAAI,oDAAJ,EAAsD;AAAA;AAAtD;;gCAQEA,oBAGK,IAHL,EAGK,IAHL,EAGK,cAFHA,oBAAwB,IAAxB,EAAwB,IAAxB,EAAI,iBAAJ,CAEG,eADHA,oBAAuB,IAAvB,EAAuB,IAAvB,EAAI,gBAAJ,CACG,CAHL;;AAAA;;gCAMEA,oBAAW,IAAX,EAAW,IAAX,EAAI,IAAJ,EAAM;AAAA;AAAN;;gCAKFA,oBAKK,IALL,EAKK,IALL,EAKK,cAJHA,oBAAa,IAAb,EAAa,IAAb,EAAI,MAAJ,CAIG,eAHHA,oBAAY,IAAZ,EAAY,IAAZ,EAAI,KAAJ,CAGG,eAFHA,oBAAa,IAAb,EAAa,IAAb,EAAI,MAAJ,CAEG,eADHA,oBAAe,IAAf,EAAe,IAAf,EAAI,QAAJ,CACG,CALL;;AAAA;;;;;;;6DAtBFC,aAA4BC,qBAA5B,EAA4B;AAAhBC,OAAG,EAAC;AAAY,GAA5B,GAEAC,YACAC,4BACAL,oBAKE,OALF,EAKE;AAJAM,QAAI,EAAC,MAIL;AAHAC,MAAE,EAAC,iBAGH;+DAFSC,kBAAUC,OAEnB;AADAC,eAAW,EAAC;AACZ,GALF;;AAAA,oBAGWF,oBAGXR,oBASQ,OATR,EASQ,IATR,EASQ,CARNW,UAQM,EAJNX,oBAGK,IAHL,EAGK,IAHL,EAGK,CAFHA,oBAA4B,IAA5B,EAA4B,IAA5B,EAA4BY,iBAAtBC,wBAAsB,CAA5B,EAAqB;AAAA;AAArB,GAEG,EADHC,UACG,CAHL,CAIM,CATR,GAWAd,oBAgBQ,OAhBR,EAgBQ,IAhBR,EAgBQ,CAfNe,UAeM,EATNC,8OASM,qBAJNC,oBAGKC,SAHL,EAGK,IAHL,EAGKC,YAHkBN,oBAGlB,EAHMO,QAAuB,IAAf;yBAAnBH,oBAGK,IAHL,EAGK;AAHgCI,SAAG,EAAED,QAAQ;AAG7C,KAHL,GACEJ,+HACAf,aAA+BqB,oBAA/B,EAA+B;AAAnBC,WAAK,EAAEH;AAAY,KAA/B,EAA2B,IAA3B,EAA2B;AAAA;AAA3B,MAA2B,SAA3B,EAFF;GAGK,CAHL;;AAAA,GAIM,EAhBR","names":["_createElementVNode","_createVNode","_component_HelloWorld","msg","_hoisted_1","_hoisted_2","type","id","_ctx","$event","placeholder","_hoisted_3","_toDisplayString","$options","_hoisted_4","_hoisted_5","_createCommentVNode","_createElementBlock","_Fragment","_renderList","spellFor","key","_component_spellView","spell"],"sourceRoot":"","sources":["/home/uhartegr/Documents/Ecole_Ingé_Enssat/IMR1/Période_3/Technologie_web/VueJS/projet-vue/src/App.vue"],"sourcesContent":["<template>\n  <HelloWorld msg=\"Sorts :\" />\n\n  <h1>Search searchName :</h1>\n  <h4>Il manque les stats(nombre de livres, de sorts...)</h4>\n  <input\n    type=\"text\"\n    id=\"search_name_val\"\n    v-model=\"searchName\"\n    placeholder=\"Rechercher\"\n  />\n  <table>\n    <tr>\n      <th>Nombre de sorts</th>\n      <th>Nombre d'armes</th>\n    </tr>\n    <tr>\n      <td>{{statistiqueSort}}</td>\n      <td>80</td>\n    </tr>\n  </table>\n\n  <table>\n    <tr>\n      <th>Arme</th>\n      <th>Nom</th>\n      <th>Sort</th>\n      <th>Classe</th>\n    </tr>\n    <!--  On boucle des lignes de tableau\n          Chaque entité de spellSearch va être stocké dans spellFor\n          Puis on met une clé pour dire sur quoi on boucle, ici le nom, mais c'est inutile dans notre cas\n    -->\n\n    <tr v-for=\"spellFor in spellSearch\" :key=\"spellFor[1]\">\n      <!--On appel l'élément spell de spellView et on lui donne la valeur de spellFor pour qu'il travaille avec -->\n      <spellView :spell=\"spellFor\" />\n    </tr>\n  </table>\n</template>\n\n<script>\nimport spellView from \"./components/formSpellView.vue\";\nimport data from \"./assets/data.min.js\"; // Lien vers toutes les données\n\nexport default {\n  name: \"App\",\n  components: {\n    spellView,\n  },\n  data: function () {\n    return { searchName: \"\" };\n  },\n  computed: {\n    spellSearch() {\n      /*On récupère les data de la base JS qu'on importe,\n        On filtre toutes les valeurs\n        On encapsule chaque valeur de nom, ici 'spell[1]' dans une variable 'spell'\n        Qui commence par les valeurs rentrés dans la zone de texte de l'input */\n      return data.filter((spell) => spell[1].startsWith(this.searchName));\n    },\n    statistiqueSort()\n    {\n      let value = data.filter((spell) => spell[1].startsWith(this.searchName));\n      let count = 0;\n      let countArrayArme =[];\n      for (const vFor of value)\n      {\n        if (!(vFor[0] in countArrayArme))\n        {\n          count++;\n          countArrayArme.push(vFor[0]);\n        }\n      } \n      return count;\n    },\n    statistiqueArme()\n    {\n      let value = data.filter((spell) => spell[1].startsWith(this.searchName));\n      let count = 0;\n      let countArrayArme =[];\n      for (const vFor of value)\n      {\n        if (!countArrayArme.includes(v))\n        {\n          count++;\n          countArrayArme.push(vFor[0]);\n        }\n      } \n      return count;\n    }\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\ntable {\n  margin-top : 20px;\n  margin-left : auto;\n  margin-right : auto;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}