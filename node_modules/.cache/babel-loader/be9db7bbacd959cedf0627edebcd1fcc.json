{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Wiki des sorts\", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"button\", null, \"Stats\", -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"button\", null, \"Configuration\", -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"th\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = {\n  class: \"stats\"\n};\n\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Nombre de livres\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Nombre de sorts\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Nombre d'écoles\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Nombre de classes\")], -1\n/* HOISTED */\n);\n\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Livres\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Nom\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Ecole\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Classe\")], -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HelloWorld = _resolveComponent(\"HelloWorld\");\n\n  const _component_checkBoxSelect = _resolveComponent(\"checkBoxSelect\");\n\n  const _component_spellStats = _resolveComponent(\"spellStats\");\n\n  const _component_spellView = _resolveComponent(\"spellView\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_HelloWorld, {\n    msg: \"Sorts :\"\n  }), _hoisted_1, _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.alert('Changement de page'))\n  }, \"Recherche\"), _hoisted_2, _hoisted_3]), _createElementVNode(\"table\", null, [_hoisted_4, _createElementVNode(\"tr\", null, [_createVNode(_component_checkBoxSelect, {\n    onSpellSearch: $options.updateSearch\n  }, null, 8\n  /* PROPS */\n  , [\"onSpellSearch\"])])]), _hoisted_5, _createCommentVNode(\"  Utiliser v-if pour afficher different pnglet \"), _createElementVNode(\"div\", null, [_createVNode(_component_spellStats)]), _createElementVNode(\"table\", _hoisted_6, [_hoisted_7, _createElementVNode(\"tr\", null, [_createElementVNode(\"td\", null, _toDisplayString($options.statistiqueNbLivreDiff), 1\n  /* TEXT */\n  ), _createElementVNode(\"td\", null, _toDisplayString($options.statistiqueSort), 1\n  /* TEXT */\n  ), _createElementVNode(\"td\", null, _toDisplayString($options.statistiqueNbEcoleDiff), 1\n  /* TEXT */\n  ), _createElementVNode(\"td\", null, _toDisplayString($options.statistiqueNbClassesDiff), 1\n  /* TEXT */\n  )])]), _createElementVNode(\"table\", null, [_hoisted_8, _createCommentVNode(\"  On boucle des lignes de tableau\\n          Chaque entité de spellSearch va être stocké dans spellFor\\n          Puis on met une clé pour dire sur quoi on boucle, ici le nom, mais c'est inutile dans notre cas\\n    \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.spellSearch, spellFor => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: spellFor[1]\n    }, [_createCommentVNode(\"On appel l'élément spell de spellView et on lui donne la valeur de spellFor pour qu'il travaille avec \"), _createVNode(_component_spellView, {\n      spell: spellFor\n    }, null, 8\n    /* PROPS */\n    , [\"spell\"])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;gCAGEA,oBAAuB,IAAvB,EAAuB,IAAvB,EAAI,gBAAJ,EAAkB;AAAA;AAAlB;;gCAGEA,oBAAsB,QAAtB,EAAsB,IAAtB,EAAQ,OAAR,EAAa;AAAA;AAAb;;gCACAA,oBAA8B,QAA9B,EAA8B,IAA9B,EAAQ,eAAR,EAAqB;AAAA;AAArB;;gCAGAA,oBAAS,IAAT,EAAS,IAAT,EAAS,IAAT,EAAS;AAAA;AAAT;;gCAKFA,oBAAM,IAAN,EAAM,IAAN,EAAM,IAAN,EAAM;AAAA;AAAN;;;AAKOC,OAAK,EAAC;;;gCACXD,oBAKK,IALL,EAKK,IALL,EAKK,cAJHA,oBAAyB,IAAzB,EAAyB,IAAzB,EAAI,kBAAJ,CAIG,eAHHA,oBAAwB,IAAxB,EAAwB,IAAxB,EAAI,iBAAJ,CAGG,eAFHA,oBAAwB,IAAxB,EAAwB,IAAxB,EAAI,iBAAJ,CAEG,eADHA,oBAA0B,IAA1B,EAA0B,IAA1B,EAAI,mBAAJ,CACG,CALL;;AAAA;;gCAeAA,oBAKK,IALL,EAKK,IALL,EAKK,cAJHA,oBAAe,IAAf,EAAe,IAAf,EAAI,QAAJ,CAIG,eAHHA,oBAAY,IAAZ,EAAY,IAAZ,EAAI,KAAJ,CAGG,eAFHA,oBAAc,IAAd,EAAc,IAAd,EAAI,OAAJ,CAEG,eADHA,oBAAe,IAAf,EAAe,IAAf,EAAI,QAAJ,CACG,CALL;;AAAA;;;;;;;;;;;6DAnCFE,aAA4BC,qBAA5B,EAA4B;AAAhBC,OAAG,EAAC;AAAY,GAA5B,GAEAC,YACAL,oBAIM,KAJN,EAIM,IAJN,EAIM,CAHJA,oBAAmE,QAAnE,EAAmE;AAAtDM,WAAK,sCAAEC,WAAK,oBAAL,CAAF;AAAiD,GAAnE,EAAiD,WAAjD,CAGI,EAFJC,UAEI,EADJC,UACI,CAJN,GAKAT,oBAKQ,OALR,EAKQ,IALR,EAKQ,CAJNU,UAIM,EAHNV,oBAEK,IAFL,EAEK,IAFL,EAEK,CADHE,aAA8CS,yBAA9C,EAA8C;AAA7BC,iBAAW,EAAEC;AAAgB,GAA9C,EAA0C,IAA1C,EAA0C;AAAA;AAA1C,IAA0C,iBAA1C,CACG,CAFL,CAGM,CALR,GAMAC,YACAC,wEACAf,oBAEM,KAFN,EAEM,IAFN,EAEM,CADJE,aAAcc,qBAAd,CACI,CAFN,GAGAhB,oBAaQ,OAbR,cAaQ,CAZNiB,UAYM,EANNjB,oBAKK,IALL,EAKK,IALL,EAKK,CAJHA,oBAAqC,IAArC,EAAqC,IAArC,EAAqCkB,iBAA9BL,+BAA8B,CAArC,EAA6B;AAAA;AAA7B,GAIG,EAHHb,oBAA8B,IAA9B,EAA8B,IAA9B,EAA8BkB,iBAAvBL,wBAAuB,CAA9B,EAAsB;AAAA;AAAtB,GAGG,EAFHb,oBAAqC,IAArC,EAAqC,IAArC,EAAqCkB,iBAA9BL,+BAA8B,CAArC,EAA6B;AAAA;AAA7B,GAEG,EADHb,oBAAuC,IAAvC,EAAuC,IAAvC,EAAuCkB,iBAAhCL,iCAAgC,CAAvC,EAA+B;AAAA;AAA/B,GACG,CALL,CAMM,CAbR,GAeAb,oBAgBQ,OAhBR,EAgBQ,IAhBR,EAgBQ,CAfNmB,UAeM,EATNJ,8OASM,qBAJNK,oBAGKC,SAHL,EAGK,IAHL,EAGKC,YAHkBT,oBAGlB,EAHMU,QAAuB,IAAf;yBAAnBH,oBAGK,IAHL,EAGK;AAHgCI,SAAG,EAAED,QAAQ;AAG7C,KAHL,GACER,+HACAb,aAA+BuB,oBAA/B,EAA+B;AAAnBC,WAAK,EAAEH;AAAY,KAA/B,EAA2B,IAA3B,EAA2B;AAAA;AAA3B,MAA2B,SAA3B,EAFF;GAGK,CAHL;;AAAA,GAIM,EAhBR","names":["_createElementVNode","class","_createVNode","_component_HelloWorld","msg","_hoisted_1","onClick","_ctx","_hoisted_2","_hoisted_3","_hoisted_4","_component_checkBoxSelect","onSpellSearch","$options","_hoisted_5","_createCommentVNode","_component_spellStats","_hoisted_7","_toDisplayString","_hoisted_8","_createElementBlock","_Fragment","_renderList","spellFor","key","_component_spellView","spell"],"sourceRoot":"","sources":["/home/maurais/Documents/projet-vue/src/App.vue"],"sourcesContent":["<template>\n  <HelloWorld msg=\"Sorts :\" />\n\n  <h1>Wiki des sorts</h1>\n  <div>\n    <button v-on:click=\"alert('Changement de page')\">Recherche</button>\n    <button>Stats</button>\n    <button>Configuration</button>\n  </div>\n  <table>\n    <th></th>\n    <tr>\n      <checkBoxSelect @spellSearch=\"updateSearch\" />\n    </tr>\n  </table>\n  <br />\n  <!--  Utiliser v-if pour afficher different pnglet -->\n  <div>\n    <spellStats />\n  </div>\n  <table class=\"stats\">\n    <tr>\n      <th>Nombre de livres</th>\n      <th>Nombre de sorts</th>\n      <th>Nombre d'écoles</th>\n      <th>Nombre de classes</th>\n    </tr>\n    <tr>\n      <td>{{ statistiqueNbLivreDiff }}</td>\n      <td>{{ statistiqueSort }}</td>\n      <td>{{ statistiqueNbEcoleDiff }}</td>\n      <td>{{ statistiqueNbClassesDiff }}</td>\n    </tr>\n  </table>\n\n  <table>\n    <tr>\n      <th>Livres</th>\n      <th>Nom</th>\n      <th>Ecole</th>\n      <th>Classe</th>\n    </tr>\n    <!--  On boucle des lignes de tableau\n          Chaque entité de spellSearch va être stocké dans spellFor\n          Puis on met une clé pour dire sur quoi on boucle, ici le nom, mais c'est inutile dans notre cas\n    -->\n\n    <tr v-for=\"spellFor in spellSearch\" :key=\"spellFor[1]\">\n      <!--On appel l'élément spell de spellView et on lui donne la valeur de spellFor pour qu'il travaille avec -->\n      <spellView :spell=\"spellFor\" />\n    </tr>\n  </table>\n</template>\n\n<script>\nimport spellView from \"./components/formSpellView.vue\";\nimport checkBoxSelect from \"./components/formCheckBoxSelect.vue\";\nimport spellStats from \"./components/formSpellStats.vue\";\nimport data from \"./assets/data.min.js\"; // Lien vers toutes les données\n\nexport default {\n  name: \"App\",\n  components: {\n    spellView,\n    checkBoxSelect,\n    spellStats,\n  },\n  data: function () {\n    return { searchName: \"\", searchNameBox: \"\" };\n  },\n  computed: {\n    spellSearch() {\n      /*On récupère les data de la base JS qu'on importe,\n        On filtre toutes les valeurs\n        On encapsule chaque valeur de nom, ici 'spell[1]' dans une variable 'spell'\n        Qui commence par les valeurs rentrés dans la zone de texte de l'input */\n      console.log(this.searchNameBox);\n      console.log(data);\n\n      if (this.searchNameBox)\n        return data.filter((spell) => spell[1].startsWith(this.searchName));\n      else return [];\n    },\n    statistiqueSort() {\n      if (this.searchNameBox) {\n        let value = data.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        return value.length;\n      } else return 0;\n    },\n    statistiqueNbLivreDiff() {\n      if (this.searchNameBox) {\n        let value = data.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        let count = 0;\n        let countArrayLivre = [];\n        for (const vFor of value) {\n          if (!countArrayLivre.includes(vFor[0])) {\n            count++;\n            countArrayLivre.push(vFor[0]);\n          }\n        }\n        return count;\n      } else return 0;\n    },\n    statistiqueNbEcoleDiff() {\n      if (this.searchNameBox) {\n        let value = data.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        let count = 0;\n        let countArraySchool = [];\n        for (const vFor of value) {\n          if (!countArraySchool.includes(vFor[2])) {\n            count++;\n            countArraySchool.push(vFor[2]);\n          }\n        }\n        return count;\n      } else return 0;\n    },\n    statistiqueNbClassesDiff() {\n      if (this.searchNameBox) {\n        let value = data.filter((spell) =>\n          spell[1].startsWith(this.searchName)\n        );\n        let count = 0;\n        let countArrayClasse = [];\n        for (const vFor of value) {\n          if (vFor[3].length != 0) {\n            for (const classe of vFor[3]) {\n              if (!countArrayClasse.includes(classe)) {\n                count++;\n                countArrayClasse.push(classe);\n              }\n            }\n          }\n        }\n        return count;\n      } else return 0;\n    },\n  },\n  methods: {\n    updateSearch(searchName, searchNameBox) {\n      this.searchName = searchName;\n      this.searchNameBox = searchNameBox;\n    },\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\ntable {\n  margin-top: 20px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.stats {\n  width: 100%;\n  border-collapse: collapse;\n  border: 2px solid black;\n}\nth {\n  padding: 5px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}